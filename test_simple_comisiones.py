#!/usr/bin/env python3
"""
Script de prueba simple para verificar la API de comisiones
"""

import requests
import json

# Configuraci√≥n
BASE_URL = "http://localhost:8000"

def test_servidor():
    """Prueba si el servidor est√° funcionando"""
    print("üß™ Probando conexi√≥n al servidor...")
    
    try:
        response = requests.get(f"{BASE_URL}/docs")
        if response.status_code == 200:
            print("‚úÖ Servidor FastAPI est√° funcionando")
            return True
        else:
            print(f"‚ö†Ô∏è Servidor responde pero no es FastAPI: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå No se puede conectar al servidor: {e}")
        return False

def test_mecanicos():
    """Prueba obtener lista de mec√°nicos"""
    print("\nüß™ Probando obtener mec√°nicos...")
    
    try:
        response = requests.get(f"{BASE_URL}/mecanicos")
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            mecanicos = response.json()
            print(f"‚úÖ Mec√°nicos encontrados: {len(mecanicos)}")
            
            for mecanico in mecanicos:
                print(f"  - ID: {mecanico.get('id')}, Nombre: {mecanico.get('nombre')}")
            
            return mecanicos
        else:
            print(f"‚ùå Error: {response.text}")
            return []
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return []

def test_comisiones_quincena(mecanico_id):
    """Prueba obtener comisiones por quincena"""
    print(f"\nüß™ Probando comisiones para mec√°nico {mecanico_id}...")
    
    # Probar diferentes quincenas
    quincenas = ["2025-Q1", "2025-Q2"]
    
    for quincena in quincenas:
        print(f"\nüìÖ Probando quincena: {quincena}")
        
        try:
            url = f"{BASE_URL}/mecanicos/{mecanico_id}/comisiones/quincena/{quincena}"
            print(f"URL: {url}")
            
            response = requests.get(url)
            print(f"Status: {response.status_code}")
            
            if response.status_code == 200:
                comisiones = response.json()
                print(f"‚úÖ Comisiones encontradas: {len(comisiones)}")
                
                if comisiones:
                    print("üìä Detalles de las comisiones:")
                    for i, comision in enumerate(comisiones[:3]):
                        print(f"  {i+1}. ID: {comision.get('id')}")
                        print(f"     Trabajo: {comision.get('descripcion_trabajo')}")
                        print(f"     Monto: ‚Ç°{comision.get('monto_comision'):,.2f}")
                        print(f"     Estado: {comision.get('estado_comision')}")
                        print(f"     Fecha: {comision.get('fecha_trabajo')}")
                        print()
                else:
                    print("‚ö†Ô∏è No hay comisiones para esta quincena")
            else:
                print(f"‚ùå Error: {response.text}")
                
        except Exception as e:
            print(f"‚ùå Error de conexi√≥n: {e}")

def main():
    """Funci√≥n principal"""
    print("üöÄ Iniciando pruebas simples de la API de comisiones")
    print("=" * 60)
    
    # Verificar servidor
    if not test_servidor():
        print("üí° Aseg√∫rate de que el servidor est√© corriendo en http://localhost:8000")
        return
    
    # Obtener mec√°nicos
    mecanicos = test_mecanicos()
    if not mecanicos:
        print("‚ùå No se pudieron obtener mec√°nicos")
        return
    
    # Probar comisiones para el primer mec√°nico
    if mecanicos:
        primer_mecanico = mecanicos[0]
        mecanico_id = primer_mecanico.get('id')
        print(f"\nüéØ Probando comisiones para: {primer_mecanico.get('nombre')} (ID: {mecanico_id})")
        
        test_comisiones_quincena(mecanico_id)
    
    print("\n" + "=" * 60)
    print("üèÅ Pruebas completadas")

if __name__ == "__main__":
    main()
